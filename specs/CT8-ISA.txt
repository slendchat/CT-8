Processor: CT-8

=== OVERVIEW ===
* 8-bit data bus
* 8-bit instruction word size
* 16 bit address bus
* endianess - (Little endian) - not sure

=== INSTRUCTIONS ===
code op   immBit    RETURN
0000 		

0001 LW  	1		RA	 <-	[HL]
0010 SW  	1		[HL] <-	RA
0011 MW  	1		reg	 <-	RA	

0100 JMP	1		PC 	 <- [HL]
0101 JZ 	1		PC 	 <- [HL] if Z = 1
0110 JC		1		PC 	 <- [HL] if C = 1

0111 NOP	1		

1000 ADD 	1		RA	 <- [RA] 	+		[reg]
1001 SUB	1		RA	 <- [RA] 	- 		[reg]
1010 AND	1		RA	 <- [RA] 	and		[reg]
1011 OR 	1		RA	 <- [RA] 	or 		[reg]
1100 XOR	1		RA	 <- [RA] 	xor		[reg]
1101 NOT	1		RA	 <- not 	[RA] 
1110 CMP 	1		C 	 <- [RA]>[reg], Z <- [RA]==[reg]

1111 HLT	1
=======================================================

code op   immBit    RETURN
0000 		

0001 LW  	0		RA	 <-	imm8
0010 SW  	0		[imm16] <-	RA
0011 MW  	0		RA	 <-	imm8	

0100 JMP	0		PC 	 <- imm16
0101 JZ 	0		PC 	 <- imm16 if Z=1
0110 JC		0		PC 	 <- imm16 if C=1

0111 NOP	0		

1000 ADD 	0		RA	 <- [RA] 	+		imm8
1001 SUB	0		RA	 <- [RA] 	- 		imm8
1010 AND	0		RA	 <- [RA] 	and		imm8
1011 OR 	0		RA	 <- [RA] 	or 		imm8
1100 XOR	0		RA	 <- [RA] 	xor		imm8
1101 NOT	0		RA	 <- [RA] 	not 	imm8
1110 CMP 	0		C 	 <- [RA]>imm8, Z <- [RA]==imm8

1111 HLT	0 

*imm8/imm16 are the byte(s) immediately following the instruction byte in memory*				

=== REGISTERS ===
A : ACCUMULATOR
B : TEMP
C : GP register
D : GP register
E : GP register
L : GP/LOW INDEX REGISTER
H : GP/HIGH INDEX REGISTER
F : FLAGS
	C:CARRY
	Z:ZERO
	N:NEGATIVE
	O:Odd

=== INSTRUCTION LAYOUT ===
Instruction layout is XXXXYZZZ 
X: 4 bit instruction identifier
Y: 0 if is memory, 1 if register
Z: 3 bit register identifier

=== ADDRESS LAYOUT ===
YXXXXXXXXXXXXXXX
Y -1bit  -> 0 = ROM; 1 = RAM
X -15bit -> ADDR
=== RAM BANKING ===
0x0000...0x7fff - ROM
0x8000...0xffff - RAM
